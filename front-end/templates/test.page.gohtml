{{template "base" .}}

{{define "content" }}
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-5">Test microservices</h1>
                <hr>
                <a id="brokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Broker</a>
                <a id="authBrokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Auth</a>
                <a id="logBrokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Logging</a>
                <a id="logRPCBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Logging RPC</a>
                <a id="logGRPCBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Logging gRPC</a>
                <a id="mailBrokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Mailing</a>
            </div>
        </div>

        <form id="auth_form" class="mt-4 needs-validation d-none" novalidate="">
            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <input type="email" class="form-control" id="email" aria-describedby="emailHelp" required="">
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" required="">
            </div>
            <a href="javascript:void(0)" class="btn btn-primary" onclick="val()">Check auth</a>
        </form>

        <form id="mail_form" class="mt-4 needs-validation d-none" novalidate="">
            <div class="mb-3">
                <label for="email_to" class="form-label">Email To</label>
                <input type="email" class="form-control" id="email_to" aria-describedby="emailHelp" required="">
            </div>
            <div class="mb-3">
                <label for="email_from" class="form-label">Email From</label>
                <input type="email" class="form-control" id="email_from" aria-describedby="emailHelp" required="">
            </div>
            <div class="mb-3">
                <label for="email_subject" class="form-label">Subject</label>
                <input type="text" class="form-control" id="email_subject" aria-describedby="emailHelp" required="">
            </div>
            <div class="mb-3">
                <label for="email_message" class="form-label">Message</label>
                <textarea class="form-control" id="email_message" rows="3" required=""></textarea>
            </div>

            <a href="javascript:void(0)" class="btn btn-primary" onclick="valMail()">Send Mail</a>
        </form>

        <div class="row">
            <div class="col">
                <div id="output" class="mt-5" style="outline: 1px solid silver; padding: 2em;">
                    <span class="text-muted">Output shows here...</span>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <h4 class="mt-5">Sent</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="payload"><span class="text-muted">Nothing sent yet...</span></pre>
                </div>
            </div>
            <div class="col">
                <h4 class="mt-5">Received</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="received"><span class="text-muted">Nothing received yet...</span></pre>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script>
        let brokerBtn = document.getElementById("brokerBtn");
        let authBtn = document.getElementById("authBrokerBtn");
        let logBtn = document.getElementById("logBrokerBtn");
        let logRPCBtn = document.getElementById("logRPCBtn");
        let logGRPCBtn = document.getElementById("logGRPCBtn");
        let mailBtn = document.getElementById("mailBrokerBtn");
        let authForm = document.getElementById("auth_form");
        let mailForm = document.getElementById("mail_form");
        let output = document.getElementById("output");
        let sent = document.getElementById("payload");
        let received = document.getElementById("received");

        brokerBtn.addEventListener("click", function () {
            authForm.classList.add("d-none");
            mailForm.classList.add("d-none");

            const body = {
                method: "POST",
            }
            fetch("{{ .BrokerURL }}", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = "empty post request";
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>${data.message}</strong>`
                    } else {
                        output.innerHTML += `<br><strong>Response from Broker Service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })
        })

        authBtn.addEventListener("click", function () {
            mailForm.classList.add("d-none");
            authForm.classList.remove("d-none");
        })

        logBtn.addEventListener("click", function () {
            authForm.classList.add("d-none");
            mailForm.classList.add("d-none");

            const payload = {
                action: "log",
                log: {
                    name: "Event Name",
                    data: "Send info into log",
                },
            }
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("{{ .BrokerURL }}/handle", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>${data.message}</strong>`
                    } else {
                        output.innerHTML += `<br><strong>Response from Broker Service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })
        })

        logRPCBtn.addEventListener("click", function () {
            authForm.classList.add("d-none");
            mailForm.classList.add("d-none");

            const payload = {
                action: "log-rpc",
                log: {
                    name: "RPC Event Name",
                    data: "Send info into log via RPC",
                },
            }
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("{{ .BrokerURL }}/handle", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>${data.message}</strong>`
                    } else {
                        output.innerHTML += `<br><strong>Response from Broker Service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })
        })

        logGRPCBtn.addEventListener("click", function () {
            authForm.classList.add("d-none");
            mailForm.classList.add("d-none");

            const payload = {
                action: "log-grpc",
                log: {
                    name: "gRPC Event Name",
                    data: "Send info into log via gRPC",
                },
            }
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("{{ .BrokerURL }}/log-grpc", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>${data.message}</strong>`
                    } else {
                        output.innerHTML += `<br><strong>Response from Broker Service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })
        })

        mailBtn.addEventListener("click", function () {
            authForm.classList.add("d-none");
            mailForm.classList.remove("d-none");
        })

        function val() {
            if (authForm.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                authForm.classList.add("was-validated");
                return;
            }
            authForm.classList.add("was-validated");

            let email = document.getElementById("email");
            let password = document.getElementById("password");

            const payload = {
                action: "auth",
                auth: {
                    email: email.value,
                    password: password.value,
                },
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("{{ .BrokerURL }}/handle", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>${data.message}</strong>`
                    } else {
                        output.innerHTML += `<br><strong>Response from Broker Service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })

        }

        function valMail() {
            if (mailForm.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                mailForm.classList.add("was-validated");
                return;
            }
            mailForm.classList.add("was-validated");

            let from = document.getElementById("email_from");
            let to = document.getElementById("email_to");
            let subject = document.getElementById("email_subject");
            let message = document.getElementById("email_message");

            const payload = {
                action: "mail",
                mail: {
                    from: from.value,
                    to: to.value,
                    subject: subject.value,
                    message: message.value,
                },
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("{{ .BrokerURL }}/handle", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>${data.message}</strong>`
                    } else {
                        output.innerHTML += `<br><strong>Response from Broker Service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })


        }

    </script>
{{end}}
